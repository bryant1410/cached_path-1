# TODO: replace occurrences of "allennlp"
name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
  release:
    types: [published]
  schedule:
  - cron: '37 11 * * 1,2,3,4,5'  # early morning (11:37 UTC / 4:37 AM PDT) Monday - Friday

env:
  # Change this to invalidate existing cache.
  CACHE_PREFIX: v0

jobs:
  style:
    name: Style
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install requirements
      run: |
        grep -E '^black' dev-requirements.txt | xargs pip install

    - name: Debug info
      run: |
        pip freeze

    - name: Run black
      run: |
        black --check .

  checks:
    name: ${{ matrix.task.name }}
    runs-on: ${{ matrix.task.runs_on }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        task:
        - name: Lint
          runs_on: ubuntu-latest
          coverage_report: false
          run: |
            make flake8
            make typecheck

        - name: CPU Tests
          runs_on: ubuntu-latest
          coverage_report: true
          run: make test

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      env:
        # Log useful debugging information.
        ACTIONS_STEP_DEBUG: 'true'
      with:
        python-version: 3.8

    - name: Install prerequisites
      run: |
        pip install --upgrade pip setuptools wheel virtualenv

    - name: Set build variables
      shell: bash
      run: |
        # Get the exact Python version to use in the cache key.
        echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV
        echo "RUNNER_ARCH=$(uname -m)" >> $GITHUB_ENV
        # Use week number in cache key so we can refresh the cache weekly.
        echo "WEEK_NUMBER=$(date +%V)" >> $GITHUB_ENV

    - uses: actions/cache@v2
      id: virtualenv-cache
      with:
        path: .venv
        key: ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-

    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        test -d .venv || virtualenv -p $(which python) --copies --reset-app-data .venv
        . .venv/bin/activate

    - name: Setup virtual environment (cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit == 'true'
      run: |
        . .venv/bin/activate
        pip install --no-deps -e .
        make download-extras

    - name: Debug info
      run: |
        . .venv/bin/activate
        which python
        pip freeze

    - name: ${{ matrix.task.name }}
      run: |
        . .venv/bin/activate
        ${{ matrix.task.run }}

    - name: Prepare coverage report
      if: matrix.task.coverage_report
      run: |
        mkdir coverage
        mv coverage.xml coverage/

    - name: Save coverage report
      if: matrix.task.coverage_report
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.task.name }}-coverage
        path: ./coverage

    - name: Clean up
      if: always()
      run: |
        # Could run into issues with the cache if we don't uninstall the editable.
        # See https://github.com/pypa/pip/issues/4537.
        . .venv/bin/activate
        pip uninstall --yes allennlp allennlp-models

  upload_coverage:
    name: Upload Coverage Report
    timeout-minutes: 5
    if: github.repository == 'allenai/allennlp' && (github.event_name == 'push' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    needs: [checks]

    steps:
      # Need to checkout code to get the coverage config.
    - uses: actions/checkout@v2

    - name: Download coverage report from CPU tests
      uses: actions/download-artifact@v1
      with:
        name: CPU Tests-coverage
        path: coverage/cpu_tests

    - name: Download coverage report from GPU Tests
      uses: actions/download-artifact@v1
      with:
        name: GPU Tests-coverage
        path: coverage/gpu_tests

    - name: Download coverage report from model tests
      uses: actions/download-artifact@v1
      with:
        name: Model Tests-coverage
        path: coverage/model_tests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: coverage/cpu_tests/coverage.xml,coverage/gpu_tests/coverage.xml,coverage/model_tests/coverage.xml
        # Ignore codecov failures as the codecov server is not
        # very reliable but we don't want to report a failure
        # in the github UI just because the coverage report failed to
        # be published.
        fail_ci_if_error: false

  # Builds package distribution files for PyPI.
  build_package:
    name: Build Package
    timeout-minutes: 18
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      env:
        # Log useful debugging information.
        ACTIONS_STEP_DEBUG: 'true'
      with:
        python-version: 3.8

    - name: Install prerequisites
      run: |
        pip install --upgrade pip setuptools wheel virtualenv

    - name: Set build variables
      shell: bash
      run: |
        echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV
        echo "RUNNER_ARCH=$(uname -m)" >> $GITHUB_ENV
        echo "WEEK_NUMBER=$(date +%V)" >> $GITHUB_ENV

    - uses: actions/cache@v2
      id: virtualenv-cache
      with:
        path: .venv
        key: ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-cpu-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-cpu-

    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        test -d .venv || virtualenv -p $(which python) --copies --reset-app-data .venv
        . .venv/bin/activate

    - name: Setup virtual environment (cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit == 'true'
      run: |
        . .venv/bin/activate
        pip install --no-deps -e .
        make download-extras

    - name: Debug info
      run: |
        . .venv/bin/activate
        which python
        pip freeze

    - name: Check and set nightly version
      if: github.event_name == 'schedule'
      run: |
        # Verify that current version is ahead of the last release.
        . .venv/bin/activate
        LATEST=$(scripts/get_version.py latest)
        CURRENT=$(scripts/get_version.py current)
        if [ "$CURRENT" == "$LATEST" ]; then
            echo "Current version needs to be ahead of latest release in order to build nightly release";
            exit 1;
        fi
        # This is somewhat bizarre, but you can't set env variables to bash
        # commands in the action workflow - so we have to use this odd way of
        # exporting a variable instead.
        echo "ALLENNLP_VERSION_SUFFIX=dev$(date -u +%Y%m%d)" >> $GITHUB_ENV

    - name: Check version and release tag match
      if: github.event_name == 'release'
      run: |
        # Remove 'refs/tags/' to get the actual tag from the release.
        . .venv/bin/activate
        TAG=${GITHUB_REF#refs/tags/};
        VERSION=$(scripts/get_version.py current)
        if [ "$TAG" != "$VERSION" ]; then
            echo "Bad tag or version. Tag $TAG does not match $VERSION";
            exit 1;
        fi

    - name: Build core package
      run: |
        # Just print out the version for debugging.
        . .venv/bin/activate
        make version
        python setup.py bdist_wheel sdist

    - name: Save core package
      uses: actions/upload-artifact@v1
      with:
        name: core-package
        path: dist

    - name: Clean up
      if: always()
      run: |
        . .venv/bin/activate
        pip uninstall --yes allennlp

  # Tests installing from the distribution files.
  test_package:
    name: Test Package
    timeout-minutes: 10
    needs: [build_package]  # needs the package artifact created from 'build_package' job.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8']

    steps:
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel

    - name: Download core package
      uses: actions/download-artifact@v1
      with:
        name: core-package
        path: dist

    - name: Install core package
      run: |
        pip install $(ls dist/*.whl)

    - name: Pip freeze
      run: |
        pip freeze

    - name: Test install
      run: |
        python -c import "cached_path"

  # Publish the core distribution files to PyPI.
  publish:
    name: PyPI
    timeout-minutes: 10
    needs: [style, checks, build_package, test_package, docker, docs]
    # Only publish to PyPI on releases and nightly builds to "allenai/allennlp" (not forks).
    if: github.repository == 'allenai/allennlp' && (github.event_name == 'release' || github.event_name == 'schedule')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel twine

    - name: Download core package
      uses: actions/download-artifact@v1
      with:
        name: core-package
        path: dist

    - name: Publish core package
      run: |
        twine upload -u allennlp -p ${{ secrets.PYPI_PASSWORD }} dist/*
